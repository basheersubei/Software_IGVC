#!/usr/bin/env python
PACKAGE = "line_detection"

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator
from dynamic_reconfigure.parameter_generator_catkin import int_t
from dynamic_reconfigure.parameter_generator_catkin import double_t

gen = ParameterGenerator()

gen.add("global_threshold", int_t, 0, "Global Threshold filter applied to\
        image.", 160, 0, 255)
gen.add("global_threshold_factor", double_t, 0, "Factor used in normalizing\
        with Global Threshold", 2.0, 0.0, 10.0)
gen.add("adaptive_threshold_block_size", int_t, 0, "Block Size used in\
        adaptive threshold (must be odd)", 41, 1, 555)
gen.add("adaptive_threshold_C", int_t, 0, "Constant value used in adaptive \
        threshold (can be negative)", -20, -30, 50)
gen.add("blur_size", int_t, 0, "Size of block to apply gaussian blur over \
        (must be odd)", 5, 1, 101)
gen.add("canny_threshold", int_t, 0, "Threshold used for canny edge \
        detection", 100, 5, 255)
gen.add("max_erode_iterations", int_t, 0, "Maximum number of iterations to \
        perform skeletonizing on", 100, 1, 1000)
gen.add("bandpass_low_cutoff", int_t, 0, "Low cutoff for bandpass \
        filter", 1, 1, 200)
gen.add("bandpass_high_cutoff", int_t, 0, "High cutoff for bandpass filter",
        30, 1, 200)
gen.add("hue_low", int_t, 0, "Lower limit for hue selection in backprojection \
        filter (H channel in HSV format)", 20, 0, 179)
gen.add("hue_high", int_t, 0, "Upper limit for hue selection in backprojection\
        filter (H channel in HSV format)", 50, 0, 179)
gen.add("saturation_low", int_t, 0, "Lower limit for saturation selection in \
        backprojection filter (S channel in HSV format)", 0, 0, 255)
gen.add("saturation_high", int_t, 0, "Upper limit for saturation selection in \
        backprojection filter (S channel in HSV format)", 255, 0, 255)
gen.add("value_low", int_t, 0, "Lower limit for value selection in \
        backprojection filter (V channel in HSV format)", 0, 0, 255)
gen.add("value_high", int_t, 0, "Upper limit for value selection in \
        backprojection filter (V channel in HSV format)", 255, 0, 255)
gen.add("backprojection_kernel_size", int_t, 0, "Size of kernel when applying \
        backprojection. Must be odd", 5, 3, 11)

gen.add("histogram_view_value", int_t, 0, "the V channel value at which to\
        view the 2d projection of the 3d histogram.", 25, 0, 180)
gen.add("gabor_ksize", int_t, 0, "Kernel size for Gabor filter", 4, 0, 300)
gen.add("gabor_sigma", double_t, 0, "Sigma (standard deviation) for Gabor\
        filter", 7, 0, 10)
gen.add("gabor_theta", double_t, 0, "Orientation of the normal for Gabor\
        filter", 0, 0, 360)
gen.add("gabor_lambda", double_t, 0, "Wavelength of sinusoid for Gabor filter",
        27, 0, 10)
gen.add("gabor_gamma", double_t, 0,
        "Spatial aspect ratio for Gabor filter", 4.0, 0, 10)
gen.add("gabor_number_of_angles", int_t, 0,
        "Number of angled filters to apply and combine", 8, 1, 16)
gen.add("hough_rho", int_t, 0, "Hough Transform Rho (resolution in pixels)",
        1, 1, 50)
gen.add("hough_theta", double_t, 0, "Hough Transform angle theta (angular\
        resolution in radians)", 0.01, 0, 6.2)
gen.add("hough_threshold", int_t, 0, "Hough Transform Threshold\
        (minimum number of intersections)", 100, 0, 255)
gen.add("hough_min_line_length", int_t, 0, "Hough Transform Minimum line\
        length", 60, 0, 1000)
gen.add("hough_max_line_gap", int_t, 0, "Hough Transform Maximum Line\
        Gap", 7, 0, 200)
gen.add("hough_thickness", int_t, 0,
        "Thickness of hough lines to draw", 1, 1, 10)
gen.add("hough_number_of_lines", int_t, 0,
        "How many hough lines to draw", 2, 1, 30)
# gen.add("roi_top_left_x", int_t, 0,
#         "X position (in pixels) of top left corner of ROI",
#         0, 0, 2000)
# gen.add("roi_top_left_y",
#         int_t, 0, "Y position (in pixels) of top left corner of ROI",
#         0, 0, 2000)
# gen.add("roi_width", int_t, 0,
#         "Width of ROI from top left corner", 610, 0, 2000)
# gen.add("roi_height",
#         int_t, 0, "Height of ROI from top left corner",
#         2000, 0, 2000)
gen.add("dilate_size",
        int_t, 0, "Size of kernel in pixels to dilate each pixel.",
        3, 0, 10)
gen.add("dilate_iterations",
        int_t, 0, "Number of iterations to run dilate.",
        1, 0, 10)
gen.add("image_width", int_t, 0,
        "Width of image to shrink to (only if it's larger)",
        640, 5, 1920)
gen.add("image_height", int_t, 0,
        "Height of image to shrink to (only if it's larger)",
        480, 5, 1080)
gen.add("skeletonize_max_iterations", int_t, 0,
        "Maximum iterations to run skeletonize filter",
        150, 0, 300)
exit(gen.generate(PACKAGE, "line_detection", "LineDetection"))
